# Refinement of Partition

On this page, $[a,b]$ is an interval, and
$f$ is a function that has minimum and maximum values on $[a,b]$ and all closed subintervals of $[a,b]$.
So, if $[a,b] = [1,4]$, it's not enough that $f$ has a minimum and a maximum on $[1,4]$;
it also has to have a minimum and a maximum on e.g. $[2,3]$.
We will need these minimums and maximums for calculations.

Let $P$ be a partition of $[a,b]$.
A **refinement** of $P$ means another partition of $[a,b]$ that contains all numbers of $P$.

asymptote:
    unitsize(3cm);
    draw((-0.5,1)--(3,1), arrow=Arrow(5mm), L=Label("$P$", align=E, position=Relative(1)));
    draw((-0.5,0)--(3,0), arrow=Arrow(5mm), L=Label("refinement of $P$", align=E, position=Relative(1)));
    real[] P = {0, 0.3, 0.7, 1.6, 2};
    real[] R = {0, 0.2, 0.3, 0.55, 0.7, 1.4, 1.6, 1.9, 2};
    for (real x : P) {
        draw((x,0)--(x,1), p=lightgray);
        dot((x, 1), p=dotpen+lightblue);
    }
    label(Label((min(P), 1), L="$a$", align=N));
    label(Label((max(P), 1), L="$b$", align=N));
    for (real x : R) {
        bool P_has_x = (find(P == x) >= 0);
        dot((x, 0), p=(P_has_x ? dotpen+lightblue : dotpen));
    }

Note that any partition is a refinement of itself
because it contains all partition numbers of itself.


## Upper and lower sums with refinements

Suppose that $R$ is a refinement of $P$ that contains one number more than $P$.
Below $r$ is the number in $R$ but not in $P$, and $n_1$ and $n_2$ are its "neighbor" partition numbers.
The upper sums of a function $f$ with these partitions look like this:

asymptote:
    unitsize(2cm);

    real f(real x) { return sin(x)+1.5; }
    real partition[] = { 1, 1.2, 2.2, 2.5, 3.1, 3.5, 4 };
    real a = partition[0];
    real b = partition[partition.length - 1];

    fill(graph(f, a, b)--(b,0)--(a,0)--cycle, lightgreen);
    axises(-0.5, 6, -0.5, 3);
    draw(graph(f, -0.5, 6), p=blue, L=Label(rotate(35)*"$y=f(x)$", position=Relative(0.9), align=N));
    label(Label((a,0), L="$P$", align=S));

    for (int i = 0; i < partition.length; ++i) {
        real x = partition[i];
        real xprev = (i == 0 ? x : partition[i-1]);
        real xnext = (i == partition.length-1 ? x : partition[i+1]);
        real fmax = max(graph(f, xprev, xnext)).y;
        draw((x,0)--(x,fmax), p=lightblue);
    }

    for (int i = 0; i < partition.length - 1; ++i) {
        real xprev = partition[i];
        real xnext = partition[i+1];
        real fmax = max(graph(f, xprev, xnext)).y;
        draw((xprev, fmax)--(xnext, fmax));
        if (i == 3) {
            draw((xprev,0)--(xnext,0), p=red+5);
            dot((xprev,0), p=dotpen, L="$n_1$", align=S);
            dot((xnext,0), p=dotpen, L="$n_2$", align=S);
        }
    }

asymptote:
    unitsize(2cm);

    real f(real x) { return sin(x)+1.5; }
    real partition[] = { 1, 1.2, 2.2, 2.5, 2.75, 3.1, 3.5, 4 };
    real a = partition[0];
    real b = partition[partition.length - 1];

    fill(graph(f, a, b)--(b,0)--(a,0)--cycle, lightgreen);
    axises(-0.5, 6, -0.5, 3);
    draw(graph(f, -0.5, 6), p=blue, L=Label(rotate(35)*"$y=f(x)$", position=Relative(0.9), align=N));
    label(Label((a,0), L="$R$", align=S));

    for (int i = 0; i < partition.length; ++i) {
        real x = partition[i];
        real xprev = (i == 0 ? x : partition[i-1]);
        real xnext = (i == partition.length-1 ? x : partition[i+1]);
        real fmax = max(graph(f, xprev, xnext)).y;
        draw((x,0)--(x,fmax), p=lightblue);
    }

    for (int i = 0; i < partition.length - 1; ++i) {
        real xprev = partition[i];
        real xnext = partition[i+1];
        real fmax = max(graph(f, xprev, xnext)).y;
        draw((xprev, fmax)--(xnext, fmax));
        if (i == 3 || i == 4) {
            draw((xprev,0)--(xnext,0), p=red+5);
            dot((xprev,0), p=dotpen);
            dot((xnext,0), p=dotpen);
        }
    }
    label((partition[4],0), Label(L="$r$", align=S));

The upper sum with $R$ is less than the upper sum with $P$ because
the rectangle between $r$ and $n_2$ is lower than before.
That's because the maximum value of $f$ on $[n_1,n_2]$ came from $[n_1,r]$, and not from $[r,n_2]$;
all values of $f$ on $[r,n_2]$ are less than the maximum on $[n_1,n_2]$.

In general, this explains why the upper sum can't increase when adding a number to the partition,
but the upper sum doesn't necessarily decrease.
For example, if the graph of $f$ is a horizontal line, then all upper sums are equal,
and adding partition numbers doesn't change them.

A similar reasoning shows that lower sums increase or stay the same when adding a partition number.

graybox:
    Let $P$ be a partition of $[a,b]$ and let $R$ be its refinement that has only one more number than $P$. Then
    $$
    \text{upper sum of $f$ with $P$} \ge \text{upper sum of $f$ with $R$}
    $$
    and
    $$
    \text{lower sum of $f$ with $P$} \le \text{lower sum of $f$ with $R$}.
    $$

By adding "new" partition numbers one by one, we see that this also works when
the refinement contains multiple partition numbers that are not in $P$.
Because we're writing $\ge$ and $\le$, it also works with how any partition is a refinement of itself.

graybox:
    Let $P$ be a partition of $[a,b]$. Then
    $$
    \text{upper sum of $f$ with $P$} \ge \text{upper sum of $f$ with any refinement of $P$}
    $$
    and
    $$
    \text{lower sum of $f$ with $P$} \le \text{lower sum of $f$ with any refinement of $P$}.
    $$


## Upper and lower sums of different partitions

If we take any two partitions of $[a,b]$, say $P_1$ and $P_2$,
then we can combine their numbers to make a partition that is a refinement of both partitions.

asymptote:
    unitsize(3cm);
    draw((-0.5,1)--(3,1), arrow=Arrow(5mm), L=Label("$P_1$", align=E, position=Relative(1)));
    draw((-0.5,0.5)--(3,0.5), arrow=Arrow(5mm), L=Label("$P_2$", align=E, position=Relative(1)));
    draw((-0.5,0)--(3,0), arrow=Arrow(5mm), L=Label("refinement", align=E, position=Relative(1)));

    real[] P1 = {0, 0.3, 0.7, 1.6, 2};
    real[] P2 = {0, 0.2, 0.55, 1.4, 1.9, 2};
    real[] R = sort(concat(P1, P2));
    for (real x : P1) {
        dot((x, 1), p=dotpen+blue);
        if (x != min(P1) && x != max(P1)) {
            dot((x, 0), p=dotpen+blue);
        }
    }
    for (real x : P2) {
        dot((x, 0.5), p=dotpen+red);
        if (x != min(P1) && x != max(P1)) {
            dot((x, 0), p=dotpen+red);
        }
    }
    dot((min(P1), 0), p=dotpen+deepmagenta, L="$a$", align=S);
    dot((max(P1), 0), p=dotpen+deepmagenta, L="$b$", align=S);

Now we get
$$
\begin{align}
\text{lower sum of $f$ with $P_1$}
&\le \text{lower sum of $f$ with refinement} \\
&\le \text{upper sum of $f$ with refinement} \\
&\le \text{upper sum of $f$ with $P_2$}.
\end{align}
$$

graybox:
    For any upper and lower sums of $f$ on $[a,b]$, we have
    $$
    \text{lower sum} \le \text{upper sum},
    $$
    even if the upper and lower sums are from different partitions.
