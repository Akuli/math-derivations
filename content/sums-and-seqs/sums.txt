# Sums

The results on this page work for any integer $n \ge 1$.
I animated the derivations with $n=7$, but similar derivations work for any other $n$ too.


## Sum of positive integers up to $n$

Let's calculate
$$
1 + 2 + 3 + \dots + n.
$$
This animation shows how this goes for $n=7$:

animation: anim-sum-of-integers
    const n = 7;
    const originalSquares = Array(n).fill().map(() => document.createElement('div'));
    const copiedSquares = Array(n).fill().map(() => document.createElement('div'));

    run([
        (
            originalSquares.map((element, x) => ({
                type: 'create',
                element, x,
                y: 0,
                textContent: x+1,
                classes: 'square',
                zIndex: 2,
            }))
        ).concat(
            copiedSquares.map((element, x) => ({
                type: 'create',
                element, x,
                y: 0,
                textContent: x+1,
                classes: 'square color1',
                zIndex: 1,
            }))
        ),
        copiedSquares.map(element => ({type: 'config', element, dy: 2})),
        copiedSquares.map((element, x) => ({type: 'config', element, x: n-x-1})),
        ...originalSquares.map((origSquare, x) => {
            const copySquare = copiedSquares[n-x-1];
            return [
                {type: 'config', element: origSquare, textContent: n+1, y: 1, classes: 'merged'},
                {type: 'config', element: copySquare, y: 1},
            ];
        }),
    ]);

In the beginning, $1+2+\dots+n$ is represented with numbers inside squares,
so we are interested in **the sum of all numbers in the squares**.
This sum doubles when we make a copy of each square, but otherwise it never changes;
this is why the numbers of the squares are added when the squares get merged together.
We ended up with $n+1=8$ showing $n$ times, once in each of the $n$ squares, so
$$
\begin{align}
1+2+3+\dots+n
&= \text{sum of numbers in the beginning} \\
&= \frac{1}{2}(\text{sum of numbers at end of animation}) \\
&= \frac{1}{2}n(n+1).
\end{align}
$$

graybox:
    $$
    1+2+\dots+n = \frac{n(n+1)}{2}
    $$


## Sum of Squares

<small>This derivation is based on [this video](https://www.youtube.com/watch?v=3IX-ukfgZdk).</small>

Let's calculate
$$
1^2 + 2^2 + 3^2 + \dots + n^2.
$$
This animation shows how this goes for $n=7$:

animation: anim-sum-of-squares
    function sumOfIntegersUpTo(n) { return n*(n+1)/2; }
    function range(n) { return Array(n).fill().map((junk, number) => number); }
    const n = 7;

    const differentSizeSquares = range(n)
        .map(i => i+1)
        .map(size =>
            range(n*n)
            .map(i => ({x: i%n, y: Math.floor(i/n)}))
            .filter(({x, y}) => x < size && y < size)
            .map(({x, y}) => ({
                x,
                y,
                element: document.createElement('div'),
                initialX: (
                    (size >= 5) ?
                        sumOfIntegersUpTo(size-1)-sumOfIntegersUpTo(4) + (size-5)
                    :
                        sumOfIntegersUpTo(size-1) + (size-1)
                ) + x - n,
                initialY: ((size >= 5) ? 5 : 0) + y - n,
            }))
        );

    const basicSquares = differentSizeSquares[n-1];

    const topCopy  = range(n*n).map(i => ({x: i%n, y: Math.floor(i/n), element: document.createElement('div')}));
    const leftCopy = range(n*n).map(i => ({x: i%n, y: Math.floor(i/n), element: document.createElement('div')}));

    run([
        differentSizeSquares.map((squareList, size) => squareList.map(({x, y, initialX, initialY, element}) => ({
            type: 'create',
            element,
            x: initialX,
            y: initialY,
            textContent: 1,
            classes: 'square',
            zIndex: 2,
        }))).flat(),

        differentSizeSquares.map(squareList => squareList.map(({x, y, element}) => ({
            type: 'config',
            element, x, y,
            textContent: (squareList.length === n*n) ? (n - Math.max(x, y)) : undefined,
        }))).flat(),

        (
            differentSizeSquares
            .filter(squareList => squareList.length !== n*n)
            .flat()
            .map(({element}) => ({type: 'delete', element}))
        ).concat(
            topCopy.concat(leftCopy).map(({x, y, element}) => ({
                type: 'create',
                element, x, y,
                textContent: n - Math.max(x, y),
                classes: 'square',
                zIndex: 1,
            }))
        ).concat(
            topCopy.map(({element}) => ({type: 'config', element, classes: 'color1'}))
        ).concat(
            leftCopy.map(({element}) => ({type: 'config', element, classes: 'color2'}))
        ),

        (
            topCopy.map(({x, y, element}) => ({type: 'config', element, x, y: -y-1}))
        ).concat(
            leftCopy.map(({x, y, element}) => ({type: 'config', element, x: -x-1, y}))
        ),

        basicSquares.map(({x, y, element}) => ({
            type: 'config',
            dx: (x < y) ? -n : (x > y) ? n : 0,
            dy: (x < y) ? n : (x > y) ? -n : 0,
            element,
        })),

        basicSquares.map(({x, y, element}) => ({
            type: 'config',
            dx: (x > y) ? -y : 0,
            dy: (x < y) ? -x : 0,
            zIndex: 3,
            element,
        })),

        ...range(n-1).map(movingRowOrColumn =>
            basicSquares
            .filter(({x, y}) => x !== y && Math.min(x, y) === movingRowOrColumn)
            .map(({x, y, element}) => ({
                type: 'config',
                element,
                classes: 'merged',
                textContent: n - Math.abs(x-y) + 1,
                ...(x<y ? {dy: -n-1} : {dx: -n-1}),
            }))
        ),
    ]);

In the beginning, $4^2$ is represented with $16 = 4 \cdot 4$ squares, each containing $1$.
The the sum of all numbers in those squares is $4^2$.
We represent other things being added similarly.

During the animation, the sum of all numberes
changes only when the red and green copies of the drawing are created, and that triples the sum.
At the end of the animation,
there are $n$ rows, $n$ columns and $1$ diagonal of squares showing $1+2+\dots+n$.
This means that we have $1+2+\dots+n$, repeated $2n+1$ times.
With these things and the result from the previous derivation, we get
$$
\begin{align}
1^2 + 2^2 + \dots + n^2
&= \text{sum of numbers in the beginning} \\
&= \frac{1}{3}(\text{sum of numbers at end of animation}) \\
&= \frac{1}{3}(2n+1)(1+2+\dots+n) \\
&= \frac{1}{3}(2n+1)\frac{n(n+1)}{2} \\
&= \frac{n(n+1)(2n+1)}{6}.
\end{align}
$$

graybox:
    $$
    1^2+2^2+\dots+n^2 = \frac{n(n+1)(2n+1)}{6}
    $$
