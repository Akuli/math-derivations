# Sums

The results on this page work for any integer $n \ge 1$.


## Sum of positive integers up to $n$

Let's calculate
$$
1 + 2 + 3 + \dots + n.
$$
Suppose that this drawing has $n$ rows of squares.
It actually has 7 rows, but this also works for any other value of $n$.

asymptote:
    unitsize(1cm);
    int n = 7;
    for (int x = 0; x < n; ++x) {
        for (int y = 0; y <= x; ++y) {
            filldraw(shift(x, y)*unitsquare, lightgreen);
        }
    }

The top row contains 1 square, the one below that contains 2 squares, and so on.
Finally, the bottom row contains $n$ squares.
For this reason, the total number of squares in the drawing is $1 + 2 + \dots + n$.
Alternatively, the leftmost column contains 1 square, the one to the right from it contains 2 squares,
and the rightmost column contains $n$ squares.

Let's make a rotated copy of the drawing...

asymptote:
    unitsize(1cm);
    int n = 7;
    for (int x = 0; x < n; ++x) {
        for (int y = 0; y <= x; ++y) {
            filldraw(shift(x, y)*unitsquare, lightgreen);
        }
    }
    for (int x = 0; x < n; ++x) {
        for (int y = 0; y <= x; ++y) {
            filldraw(shift(2*n + 3, n)*rotate(180)*shift(x, y)*unitsquare, lightyellow);
        }
    }

...and move the copies together:

asymptote:
    unitsize(1cm);
    int n = 7;
    for (int x = 0; x < n; ++x) {
        for (int y = 0; y <= x; ++y) {
            filldraw(shift(x, y)*unitsquare, lightgreen);
        }
    }
    for (int x = 0; x < n; ++x) {
        for (int y = 0; y <= x; ++y) {
            filldraw(shift(n-1, n)*rotate(180)*shift(x, y)*unitsquare, lightyellow);
        }
    }

We now have a rectangle with
$n+1$ squares horizontally (e.g. $n$ yellow squares and $1$ green square in top row)
and $n$ squares vertically.
That is a total of $n(n+1)$ squares.
Exactly half of the squares are green, so the number of green squares is half of the total number of squares.
On the other hand, we started with $1+2+\dots+n$ green squares.

graybox:
    $$
    1+2+\dots+n = \frac{n(n+1)}{2}
    $$

To fit drawings into smaller space, instead of this...

asymptote:
    unitsize(1cm);
    int n = 7;
    for (int x = 0; x < n; ++x) {
        for (int y = 0; y <= x; ++y) {
            filldraw(shift(x, y)*unitsquare, lightgreen);
        }
    }

...I could have drawn the squares so that they overlap, like this:

asymptote:
    unitsize(1cm);
    int n = 7;
    for (int x = n-1; x >= 0; --x) {
        for (int y = 0; y <= x; ++y) {
            filldraw(shift(x + y/10, y/5)*unitsquare, lightgreen);
        }
    }

Or like this, so that a square with 5 in it essentially means stacking 5 squares on top of each other:

asymptote:
    unitsize(1cm);
    int n = 7;
    for (int x = 0; x < n; ++x) {
        path square = shift(x, 0)*unitsquare;
        filldraw(square, lightgreen);
        label(format("%d", x+1), (min(square) + max(square))/2);
    }

Recall that we care about $1+2+\dots+n$, which is now the sum of all numbers in the drawing.
These drawings will be used in other derivations below.


## $n-1$ ones, $n-2$ twos etc.

This section by itself isn't very interesting, but we'll need it soon.
Again, I will use $n=7$ for the drawings, even though this works similarly for any $n$.

asymptote:
    unitsize(1cm);
    int n = 7;

    for (int x = 0; x < n-1; ++x) {
        for (int y = 0; y+x < n-1; ++y) {
            filldrawlabel(shift(x, y)*unitsquare, lightblue, format("%d", x+1));
            filldrawlabel(shift(n,0)*shift(x, y)*unitsquare, lightred, format("%d", n-1-(x+y)));
            filldrawlabel(shift(2n,0)*shift(x, y)*unitsquare, lightgreen, format("%d", y+1));
        }
    }

Each of the above drawings has $n-1$ ones, $n-2$ twos, $n-3$ threes and so on, and finally one $n-1$.
For this reason, the sum of all numbers is the same in each drawing. Our goal is to calculate it.

Let's now move the blue and red drawings on top of each other...

asymptote:
    unitsize(1cm);
    int n = 7;

    for (int x = 0; x < n-1; ++x) {
        for (int y = 0; y+x < n-1; ++y) {
            filldrawlabel(shift(x, y)*unitsquare, lightblue, format("%d", x+1));
        }
    }
    for (int x = 0; x < n-1; ++x) {
        for (int y = 0; y+x < n-1; ++y) {
            filldrawlabel(shift(0.25,0.4)*shift(x, y)*unitsquare, lightred, format("%d", n-1-(x+y)));
            filldrawlabel(shift(n+2,0)*shift(x, y)*unitsquare, lightgreen, format("%d", y+1));
        }
    }

...and whenever a blue square with number $\blue{a}$ and a red square with number $\red{b}$ overlap,
we replace that with a pink square whose number $\blue{a}+\red{b}$:

asymptote:
    unitsize(1cm);
    int n = 7;

    for (int x = 0; x < n-1; ++x) {
        for (int y = 0; y+x < n-1; ++y) {
            filldrawlabel(shift(x, y)*unitsquare, lightmagenta, format("%d", n-y));
            filldrawlabel(shift(n+2,0)*shift(x, y)*unitsquare, lightgreen, format("%d", y+1));
        }
    }

For example, the $\magenta{5~5~5~5}$ row came from adding $\blue{1~2~3~4}$ and $\red{4~3~2~1}$.
This is why each row consists of just one repeated number.

Let's add the remaining two drawings together too:

asymptote:
    unitsize(1cm);
    int n = 7;

    for (int x = 0; x < n-1; ++x) {
        for (int y = 0; y+x < n-1; ++y) {
            filldrawlabel(shift(x, y)*unitsquare, lightmagenta, format("%d", n-y));
        }
    }
    for (int x = 0; x < n-1; ++x) {
        for (int y = 0; y+x < n-1; ++y) {
            filldrawlabel(shift(0.25,0.4)*shift(x, y)*unitsquare, lightgreen, format("%d", y+1));
        }
    }

asymptote:
    unitsize(1cm);
    int n = 7;

    for (int x = 0; x < n-1; ++x) {
        for (int y = 0; y+x < n-1; ++y) {
            filldrawlabel(shift(x, y)*unitsquare, lightyellow, format("%d", n+1));
        }
    }

Now the number in each square is $8=7+1=n+1$.
By using the result of the previous derivation with $n-1$ instead of $n$,
we get that the number of squares in the drawing is
$$
1+2+3+\dots+(n-1) = \frac{(n-1)((n-1)+1)}{2} = \frac{(n-1)n}{2},
$$
and because each square is numbered with $n+1$, the sum of all numbers is
$$
(n+1)\frac{(n-1)n}{2} = \frac{(n-1)n(n+1)}{2}.
$$
Recall that we started with 3 drawings having, each containing same numbers.
For that reason, the sum of numbers in each drawing must be
$$
\frac{1}{3} \frac{(n-1)n(n+1)}{2} = \frac{(n-1)n(n+1)}{6}.
$$

graybox:
    The sum of all numbers in the below drawings is
    $$
    \frac{(n-1)n(n+1)}{6}.
    $$

    asymptote:
        // aku-debug
        unitsize(1cm);
        int n = 7;

        for (int x = 0; x < n-1; ++x) {
            for (int y = 0; y+x < n-1; ++y) {
                filldrawlabel(shift(x, y)*unitsquare, lightblue, format("%d", x+1));
                filldrawlabel(shift(n,0)*shift(x, y)*unitsquare, lightred, format("%d", n-1-(x+y)));
                filldrawlabel(shift(2n,0)*shift(x, y)*unitsquare, lightgreen, format("%d", y+1));
            }
        }



## Sum of Squares

We calculate
$$
1^2+2^2+\dots+n^2.
$$
Again, we visualize this for $n=7$, like this:

asymptote:
    unitsize(1cm);
    int n = 7;
    real xshift = 0;
    real yshift = 0;
    for (int k = n; k >= 1; --k) {
        for (int x = 0; x < k; ++x) {
            for (int y = 0; y < k; ++y) {
                filldrawlabel(shift(xshift, yshift)*shift(x, y)*unitsquare, lightgreen, "1");
            }
        }
        if (k == 5) {
            xshift = 0;
            yshift = -k;
        } else {
            xshift += k + 0.5;
        }
    }

Let's stack all of these on top of each other.

asymptote:
    unitsize(1cm);
    int n = 7;
    for (int k = n; k >= 1; --k) {
        for (int x = 0; x < k; ++x) {
            for (int y = -k; y < 0; ++y) {
                filldrawlabel(shift(0.1k, 0.15k)*shift(x, y)*unitsquare, lightgreen, "1");
            }
        }
    }

asymptote:
    unitsize(1cm);
    int n = 7;
    for (int x = 0; x < n; ++x) {
        for (int y = 0; y < n; ++y) {
            filldrawlabel(shift(x, y)*unitsquare, lightgreen, format("%d", min(n-x,y+1)));
        }
    }

Now let's view this square as consisting of 3 different parts, separated by the diagonal part:

asymptote:
    unitsize(1cm);
    int n = 7;
    for (int x = 0; x < n; ++x) {
        for (int y = 0; y < n; ++y) {
            filldrawlabel(shift(x, y)*unitsquare, x+y==n-1 ? lightblue : lightgreen, format("%d", min(n-x,y+1)));
        }
    }

Based on the above derivations, the sum of each green part is
$$
\frac{(n-1)n(n+1)}{6},
$$
and the sum of the blue part is
$$
1+2+\dots+n = \frac{n(n+1)}{2}.
$$
With two green parts and one blue part, we then get
$$
\begin{align*}
2\frac{(n-1)n(n+1)}{6} + \frac{n(n+1)}{2}
&= \frac{(2n-2)n(n+1) + 3n(n+1)}{6} \\
&= \frac{(2n-2+3)n(n+1)}{6} \\
&= \frac{n(n+1)(2n+1)}{6}.
\end{align*}
$$

graybox:
    $$
    1^2+2^2+3^2+\dots+n^2 = \frac{n(n+1)(2n+1)}{6}
    $$
